// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api/setting/v1/setting.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SettingClient is the client API for Setting service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SettingClient interface {
	//read some setting
	ReadSetting(ctx context.Context, in *ReadSettingRequest, opts ...grpc.CallOption) (*ReadSettingReply, error)
	//write some setting
	WriteSetting(ctx context.Context, in *WriteSettingRequest, opts ...grpc.CallOption) (*WriteSettingReply, error)
	//show some service setting list
	ShowServices(ctx context.Context, in *ShowServicesRequest, opts ...grpc.CallOption) (*ShowServicesReply, error)
	//show some history setting for appoint service
	ShowHistoryService(ctx context.Context, in *ShowHistoryServiceRequest, opts ...grpc.CallOption) (*ShowHistoryServiceReply, error)
}

type settingClient struct {
	cc grpc.ClientConnInterface
}

func NewSettingClient(cc grpc.ClientConnInterface) SettingClient {
	return &settingClient{cc}
}

func (c *settingClient) ReadSetting(ctx context.Context, in *ReadSettingRequest, opts ...grpc.CallOption) (*ReadSettingReply, error) {
	out := new(ReadSettingReply)
	err := c.cc.Invoke(ctx, "/setting.v1.Setting/ReadSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingClient) WriteSetting(ctx context.Context, in *WriteSettingRequest, opts ...grpc.CallOption) (*WriteSettingReply, error) {
	out := new(WriteSettingReply)
	err := c.cc.Invoke(ctx, "/setting.v1.Setting/WriteSetting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingClient) ShowServices(ctx context.Context, in *ShowServicesRequest, opts ...grpc.CallOption) (*ShowServicesReply, error) {
	out := new(ShowServicesReply)
	err := c.cc.Invoke(ctx, "/setting.v1.Setting/ShowServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *settingClient) ShowHistoryService(ctx context.Context, in *ShowHistoryServiceRequest, opts ...grpc.CallOption) (*ShowHistoryServiceReply, error) {
	out := new(ShowHistoryServiceReply)
	err := c.cc.Invoke(ctx, "/setting.v1.Setting/ShowHistoryService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SettingServer is the server API for Setting service.
// All implementations must embed UnimplementedSettingServer
// for forward compatibility
type SettingServer interface {
	//read some setting
	ReadSetting(context.Context, *ReadSettingRequest) (*ReadSettingReply, error)
	//write some setting
	WriteSetting(context.Context, *WriteSettingRequest) (*WriteSettingReply, error)
	//show some service setting list
	ShowServices(context.Context, *ShowServicesRequest) (*ShowServicesReply, error)
	//show some history setting for appoint service
	ShowHistoryService(context.Context, *ShowHistoryServiceRequest) (*ShowHistoryServiceReply, error)
	mustEmbedUnimplementedSettingServer()
}

// UnimplementedSettingServer must be embedded to have forward compatible implementations.
type UnimplementedSettingServer struct {
}

func (UnimplementedSettingServer) ReadSetting(context.Context, *ReadSettingRequest) (*ReadSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSetting not implemented")
}
func (UnimplementedSettingServer) WriteSetting(context.Context, *WriteSettingRequest) (*WriteSettingReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteSetting not implemented")
}
func (UnimplementedSettingServer) ShowServices(context.Context, *ShowServicesRequest) (*ShowServicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowServices not implemented")
}
func (UnimplementedSettingServer) ShowHistoryService(context.Context, *ShowHistoryServiceRequest) (*ShowHistoryServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHistoryService not implemented")
}
func (UnimplementedSettingServer) mustEmbedUnimplementedSettingServer() {}

// UnsafeSettingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SettingServer will
// result in compilation errors.
type UnsafeSettingServer interface {
	mustEmbedUnimplementedSettingServer()
}

func RegisterSettingServer(s grpc.ServiceRegistrar, srv SettingServer) {
	s.RegisterService(&Setting_ServiceDesc, srv)
}

func _Setting_ReadSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServer).ReadSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.v1.Setting/ReadSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServer).ReadSetting(ctx, req.(*ReadSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Setting_WriteSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServer).WriteSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.v1.Setting/WriteSetting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServer).WriteSetting(ctx, req.(*WriteSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Setting_ShowServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServer).ShowServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.v1.Setting/ShowServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServer).ShowServices(ctx, req.(*ShowServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Setting_ShowHistoryService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowHistoryServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SettingServer).ShowHistoryService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/setting.v1.Setting/ShowHistoryService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SettingServer).ShowHistoryService(ctx, req.(*ShowHistoryServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Setting_ServiceDesc is the grpc.ServiceDesc for Setting service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Setting_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "setting.v1.Setting",
	HandlerType: (*SettingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadSetting",
			Handler:    _Setting_ReadSetting_Handler,
		},
		{
			MethodName: "WriteSetting",
			Handler:    _Setting_WriteSetting_Handler,
		},
		{
			MethodName: "ShowServices",
			Handler:    _Setting_ShowServices_Handler,
		},
		{
			MethodName: "ShowHistoryService",
			Handler:    _Setting_ShowHistoryService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/setting/v1/setting.proto",
}
