// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.1.4

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type SettingHTTPServer interface {
	ReadSetting(context.Context, *ReadSettingRequest) (*ReadSettingReply, error)
	ShowHistoryService(context.Context, *ShowHistoryServiceRequest) (*ShowHistoryServiceReply, error)
	ShowServices(context.Context, *ShowServicesRequest) (*ShowServicesReply, error)
	WriteSetting(context.Context, *WriteSettingRequest) (*WriteSettingReply, error)
}

func RegisterSettingHTTPServer(s *http.Server, srv SettingHTTPServer) {
	r := s.Route("/")
	r.GET("/setting/readSetting", _Setting_ReadSetting0_HTTP_Handler(srv))
	r.POST("/setting/writeSetting", _Setting_WriteSetting0_HTTP_Handler(srv))
	r.GET("/setting/showServices", _Setting_ShowServices0_HTTP_Handler(srv))
	r.GET("/setting/showHistory/{app_id}", _Setting_ShowHistoryService0_HTTP_Handler(srv))
}

func _Setting_ReadSetting0_HTTP_Handler(srv SettingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadSettingRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/setting.v1.Setting/ReadSetting")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadSetting(ctx, req.(*ReadSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadSettingReply)
		return ctx.Result(200, reply)
	}
}

func _Setting_WriteSetting0_HTTP_Handler(srv SettingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in WriteSettingRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/setting.v1.Setting/WriteSetting")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.WriteSetting(ctx, req.(*WriteSettingRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*WriteSettingReply)
		return ctx.Result(200, reply)
	}
}

func _Setting_ShowServices0_HTTP_Handler(srv SettingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShowServicesRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/setting.v1.Setting/ShowServices")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShowServices(ctx, req.(*ShowServicesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShowServicesReply)
		return ctx.Result(200, reply)
	}
}

func _Setting_ShowHistoryService0_HTTP_Handler(srv SettingHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ShowHistoryServiceRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/setting.v1.Setting/ShowHistoryService")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ShowHistoryService(ctx, req.(*ShowHistoryServiceRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ShowHistoryServiceReply)
		return ctx.Result(200, reply)
	}
}

type SettingHTTPClient interface {
	ReadSetting(ctx context.Context, req *ReadSettingRequest, opts ...http.CallOption) (rsp *ReadSettingReply, err error)
	ShowHistoryService(ctx context.Context, req *ShowHistoryServiceRequest, opts ...http.CallOption) (rsp *ShowHistoryServiceReply, err error)
	ShowServices(ctx context.Context, req *ShowServicesRequest, opts ...http.CallOption) (rsp *ShowServicesReply, err error)
	WriteSetting(ctx context.Context, req *WriteSettingRequest, opts ...http.CallOption) (rsp *WriteSettingReply, err error)
}

type SettingHTTPClientImpl struct {
	cc *http.Client
}

func NewSettingHTTPClient(client *http.Client) SettingHTTPClient {
	return &SettingHTTPClientImpl{client}
}

func (c *SettingHTTPClientImpl) ReadSetting(ctx context.Context, in *ReadSettingRequest, opts ...http.CallOption) (*ReadSettingReply, error) {
	var out ReadSettingReply
	pattern := "/setting/readSetting"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/setting.v1.Setting/ReadSetting"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SettingHTTPClientImpl) ShowHistoryService(ctx context.Context, in *ShowHistoryServiceRequest, opts ...http.CallOption) (*ShowHistoryServiceReply, error) {
	var out ShowHistoryServiceReply
	pattern := "/setting/showHistory/{app_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/setting.v1.Setting/ShowHistoryService"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SettingHTTPClientImpl) ShowServices(ctx context.Context, in *ShowServicesRequest, opts ...http.CallOption) (*ShowServicesReply, error) {
	var out ShowServicesReply
	pattern := "/setting/showServices"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/setting.v1.Setting/ShowServices"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SettingHTTPClientImpl) WriteSetting(ctx context.Context, in *WriteSettingRequest, opts ...http.CallOption) (*WriteSettingReply, error) {
	var out WriteSettingReply
	pattern := "/setting/writeSetting"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/setting.v1.Setting/WriteSetting"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
